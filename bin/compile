#!/bin/bash


mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
env_dir="${3}"
buildpack=$(cd "$(dirname $0)/.." && pwd)

goVersion=$(cat $env_dir/GO_VERSION)
project=$(cat $env_dir/PROJECT)
goPath="${cache}/${goVersion}/go"

if [ -d "${goPath}" ]; then
    echo "-----> Using ${goVersion}"
else
    #For a go version change, we delete everything
    echo "-----> New Go Version, clearing old cache"
    if [ -d "${cache}/go-path" ]; then
        find "${cache}/go-path" ! -perm -u=w -print0 | xargs -r -0 chmod u+w 2>&1
    fi
    rm -rf ${cache}/*

    goFile="go${goVersion}.linux-amd64.tar.gz"

    echo "-----> Installing ${goVersion}"
    wget "https://go.dev/dl/$goFile"
    tar -C ${goPath} --strip-components=1 -zxf $goFile
    rm -f "${goPath}/${goFile}"
fi

export GOROOT="${goPath}"
PATH="${goPath}/bin:${PATH}"

# Export GOCACHE if Go >= 1.10
if go env | grep -q '^GOCACHE='; then
    export GOCACHE="${cache}/go-build-cache"
fi

echo "-----> Installing ${project}"
make $project

exit 1
